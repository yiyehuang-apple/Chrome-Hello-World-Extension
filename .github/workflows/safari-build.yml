name: Build and Deploy Safari Extension

on:
  push:
    branches: [ test ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: Setup project structure
      run: |
        ls -la
        echo "checking manifest..."
        if [ -f "manifest.json" ]; then
          echo "✅ manifest.json exist"
        else
          echo "⚠️ manifest.json not exist"
          exit 1
        fi
    
    - name: Convert Chrome Extension to Safari Extension
      run: |
        echo "Begin convert..."
        xcrun safari-web-extension-converter ${GITHUB_WORKSPACE} --project-location ${GITHUB_WORKSPACE}/safari-extension --copy-resources --no-open --no-prompt
        echo "conver complete ✅✅"
    
    - name: Build Safari Extension
      run: |
        echo "Find Xcode project..."
        PROJECT_DIR=$(find ${GITHUB_WORKSPACE}/safari-extension -name "*.xcodeproj" -type d | head -n 1)
        
        if [ -z "$PROJECT_DIR" ]; then
          echo "❌ no .xcodeproj 文件"
          echo "Dir:"
          find ${GITHUB_WORKSPACE}/safari-extension -type d
          exit 1
        fi
        
        PROJECT_NAME=$(basename "$PROJECT_DIR" .xcodeproj)
        WORKING_DIR=$(dirname "$PROJECT_DIR")
        
        echo "Project: $PROJECT_DIR"
        echo "name: $PROJECT_NAME"
        echo "working dir: $WORKING_DIR"
        
        cd "$WORKING_DIR"
        
        echo "All scheme:"
        xcodebuild -project "${PROJECT_NAME}.xcodeproj" -list
        
        SCHEME=$(xcodebuild -project "${PROJECT_NAME}.xcodeproj" -list | grep -A 10 "Schemes:" | grep -v "Schemes:" | grep -v "^$" | head -n 1 | xargs)
        
        if [ -z "$SCHEME" ]; then
          echo "❌ no scheme"
          exit 1
        fi
        
        echo "Use scheme: $SCHEME"
        
        VERSION="1.0.0"
        BUILD_NUMBER=${{ github.run_number }}
        
        ls -la
        
        xcodebuild -project "${PROJECT_NAME}.xcodeproj" -scheme "Hello Extensions (macOS)" -configuration Debug \
          CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO \
          SWIFT_OPTIMIZATION_LEVEL="-Onone" \
          -derivedDataPath build ONLY_ACTIVE_ARCH=NO
        echo "complete！"
    
    - name: Archive artifacts
      uses: actions/upload-artifact@v4
      with:
        name: safari-extension
        path: |
          **/build/Build/Products/Debug*/*.app
          **/build/Build/Products/Debug*/*.appex

    # - name: Install Apple Certificate
    #   if: github.event_name != 'pull_request'
    #   env:
    #     BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
    #     P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
    #     KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
    #   run: |
    #     # create keychain
    #     KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
    #     security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
    #     security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
    #     security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
    #     
    #     # input cert to keychain
    #     echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $RUNNER_TEMP/build_certificate.p12
    #     security import $RUNNER_TEMP/build_certificate.p12 -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
    #     security list-keychain -d user -s $KEYCHAIN_PATH
    
    # - name: Install Provisioning Profile
    #   if: github.event_name != 'pull_request'
    #   env:
    #     PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
    #   run: |
    #     # 创建provisioning profile目录
    #     mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
    #     
    #     # 导入provisioning profile
    #     echo -n "$PROVISIONING_PROFILE_BASE64" | base64 --decode --output ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
    
    # - name: Export IPA
    #   if: github.event_name != 'pull_request'
    #   working-directory: safari-extension
    #   env:
    #     EXPORT_OPTIONS_PLIST_BASE64: ${{ secrets.EXPORT_OPTIONS_PLIST_BASE64 }}
    #   run: |
    #     PROJECT_NAME=$(ls *.xcodeproj | head -n 1 | sed 's/\.xcodeproj//')
    #     
    #     echo -n "$EXPORT_OPTIONS_PLIST_BASE64" | base64 --decode --output $RUNNER_TEMP/ExportOptions.plist
    #     
    #     xcodebuild -project ${PROJECT_NAME}.xcodeproj -scheme "${PROJECT_NAME}" -configuration Release -archivePath $RUNNER_TEMP/app.xcarchive archive
    #     
    #     xcodebuild -exportArchive -archivePath $RUNNER_TEMP/app.xcarchive -exportPath $RUNNER_TEMP/export -exportOptionsPlist $RUNNER_TEMP/ExportOptions.plist
    
    # - name: Upload to TestFlight
    #   if: github.event_name != 'pull_request'
    #   env:
    #     APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
    #     APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
    #     APP_STORE_CONNECT_API_KEY_BASE64: ${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}
    #   run: |
    #     echo -n "$APP_STORE_CONNECT_API_KEY_BASE64" | base64 --decode --output $RUNNER_TEMP/api_key.p8
    #
    #     xcrun altool --upload-app --type ios --file $RUNNER_TEMP/export/*.ipa \
    #       --apiKey "$APP_STORE_CONNECT_API_KEY_ID" \
    #       --apiIssuer "$APP_STORE_CONNECT_API_ISSUER_ID" \
    #       --api-key-path $RUNNER_TEMP/api_key.p8
